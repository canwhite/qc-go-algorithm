package sort

/**
1. 在一个长度为 N 的无序数组中，第一次遍历 n-1 个数找到最小的和第一个数交换。
2. 第二次从下一个数开始遍历 n-2 个数，找到最小的数和第二个数交换。
3. 重复以上操作直到第 n-1 次遍历最小的数和第 n-1 个数交换，排序完成。

*/

// 定义一个函数，接受一个证书切片作为参数
func SelectionSort(a []int) []int {

	//获取切片长度
	n := len(a)

	for i := 0; i < n; i++ {
		//假设当前元素是最小的
		min := i
		//在剩余的元素中寻找最小的, 关键是这个剩余j= i+1
		for j := i + 1; j < n; j++ {
			//如果找到比当前元素更小的
			if a[j] < a[min] {
				min = j
			}
		}
		//如果最小元素不是当前元素，交换
		if min != i {
			//元组赋值做交换，为什么叫做元组赋值呢？
			//是因为这种赋值形式可以同时对多个变量进行赋值操作,而元组(tuple)正是一个包含多个元素的组合
			a[i], a[min] = a[min], a[i]
		}

	}
	return a
}
