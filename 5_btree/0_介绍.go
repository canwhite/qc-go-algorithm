package btree

/**
1.二叉树解决的问题
	二叉树是一种树形数据结构,它适用于需要进行快速查找、插入和删除的场景。
	典型的应用有二叉查找树,二叉堆和红黑树等。

2.二叉树是什么
 	二叉树是每个节点最多有两个子节点的树形结构。通常子节点被称作“左子节点”和“右子节点”。
	二叉树适用于实现优先队列和字典这两种抽象数据类型。

3.二叉树的分类根据节点的子节点个数，可以分为：
	根据节点的子节点个数，可以分为：
		满二叉树：每个节点要么没有子节点，要么有两个子节点。
		完全二叉树：除了最后一层外，每一层都是满的，并且最后一层的节点都靠左排列。
		退化二叉树：每个节点只有一个子节点，相当于链表。
		偏斜二叉树：每个节点只有一个子节点，要么都是左子节点，要么都是右子节点。
	根据节点的值的大小，可以分为：
		二叉搜索树：对于任意一个节点，它的左子树中的所有节点的值都小于它，它的右子树中的所有节点的值都大于它。
		平衡二叉树：对于任意一个节点，它的左子树和右子树的高度差不超过1。
		堆：对于任意一个节点，它的值要么大于等于它的所有后代（最大堆），要么小于等于它的所有后代（最小堆）。
	根据其他特征，可以分为：
		线索二叉树：利用空指针域存储前驱或后继信息，方便遍历。
		赫夫曼树：一种带权路径长度最短的二叉树，用于数据压缩。
		表达式树：一种用于表示算术表达式的二叉树，其中叶子节点是操作数，非叶子节点是操作符。


4.如何使用二叉树
     二叉树的基本操作主要有:
		1)插入节点:将新节点插入到二叉树中适当的位置。对于二叉查找树,插入新节点到叶子节点,维持二叉树的搜索树性质。
		2)删除节点:从二叉树中移除一个节点。需要将移除节点的子节点进行重连,且维持二叉树的搜索树性质。
		3)查找节点:在二叉树中查找一个节点,对于二叉查找树使用节点值进行搜索。
     4)遍历:主要有前序、中序和后序三种遍历方法。
     要熟练使用二叉树,需要对以上操作都比较熟悉。以二叉查找树为例:
		1) 插入节点:将新节点插入到叶子节点,并维持左子树的值小于根节点,右子树的值大于根节点。
		2) 删除节点:分三种情况讨论,将子节点进行重连并维持搜索树性质。
		3) 查找节点:使用节点值进行搜索, if node.value > 查找值 则搜索左子树,否则搜索右子树。
		4) 遍历:前序遍历为根-左-右,中序遍历为左-根-右,后序遍历为左-右-根。二叉树是最基础的数据结构之一,熟练掌握它对学习更高级的数据结构和算法很有帮助。如果有任何疑问欢迎提出





*/
